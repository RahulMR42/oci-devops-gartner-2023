version: 0.1
component: build
timeoutInSeconds: 6000
runAs: root
shell: bash
env:
  # these are local variables to the build config
  variables:
    NVM_VERSION: "v0.39.0"
  vaultVariables:
    HELM_REPO_USER: ocid1.vaultsecret.oc1.iad.amaaaaaayat6pyaazejjxqtauh3z7yn7nljmphwc6p5puqsik36ktadxvfmq
    USER_AUTH_TOKEN: ocid1.vaultsecret.oc1.iad.amaaaaaayat6pyaakbhuf2xhboondo3sw6ila7ztqrljdtobo2hvb4wkxx7q
    GPG_PASSPHRASE: ocid1.vaultsecret.oc1.iad.amaaaaaayat6pyaay6ql4zbnnivmcrobzdhwfrloc3rfuumfiy23mwfzaaxa

  exportedVariables:
    - BUILDRUN_HASH_HELM

steps:
  - type: Command
    name: "Setup the Environment"
    timeoutInSeconds: 400
    command: |
      cd ${OCI_PRIMARY_SOURCE_DIR}/app_for_helm_deployment
      export BUILDRUN_HASH_HELM=`echo ${OCI_BUILD_RUN_ID} | rev | cut -c 1-7`
      echo "BUILDRUN_HASH_HELM: " BUILDRUN_HASH_HELM
      oci artifacts generic artifact download --artifact-id ${GPG_ARTIFACT_OCID} --file ${OCI_PRIMARY_SOURCE_DIR}/app_for_helm_deployment/private_decoded
      echo ${GPG_PASSPHRASE} >${OCI_PRIMARY_SOURCE_DIR}/app_for_helm_deployment/gpg.pass
  - type: Command
    timeoutInSeconds: 600
    name: "Install Node Prereqs"
    command: |
      cd ${OCI_PRIMARY_SOURCE_DIR}/app_for_helm_deployment
      # install nvm
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/${NVM_VERION}/install.sh | bash
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
      nvm install lts/erbium
      echo "NODE VERSION: $(node -v)"
      echo "NPM VERSION: $(npm -v)"

    onFailure:
      - type: Command
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 40
        runAs: root

  - type: Command
    timeoutInSeconds: 600
    name: "NPM install"
    command: |
      cd ${OCI_PRIMARY_SOURCE_DIR}/app_for_helm_deployment
      npm install
    onFailure:
      - type: Command
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 40
        runAs: root

#  - type: Command
#    timeoutInSeconds: 1200
#    name: "Run Tests"
#    command: |
#      cd ${OCI_PRIMARY_SOURCE_DIR}/app_for_helm_deployment
#      npm test

  - type: Command
    timeoutInSeconds: 1200
    name: "Build container image"
    command: |
      cd ${OCI_PRIMARY_SOURCE_DIR}/app_for_helm_deployment
      docker build --pull --rm -t node-express-getting-starter .

  - type: Command
    timeoutInSeconds: 1200
    name: "Helm Package & Push"
    command: |
      cd ${OCI_PRIMARY_SOURCE_DIR}/app_for_helm_deployment/helm/node-service
      export BUILDRUN_HASH_HELM=${BUILDRUN_HASH_HELM}
      originalChartfile="Chart.yaml"
      tmpChartfile=$(mktemp)
      cp --attributes-only --preserve $originalChartfile $tmpChartfile
      cat $originalChartfile | envsubst > $tmpChartfile && mv $tmpChartfile $originalChartfile
      originalValuesfile="values.yaml"
      tmpValuesfile=$(mktemp)
      cp --attributes-only --preserve $originalValuesfile $tmpValuesfile
      cat $originalValuesfile | envsubst > $tmpValuesfile && mv $tmpValuesfile $originalValuesfile 
      cat $originalValuesfile
      helm package --sign --key ${HELM_SIGN_KEY} --keyring ${OCI_PRIMARY_SOURCE_DIR}/app_for_helm_deployment/private_decoded --passphrase-file ${OCI_PRIMARY_SOURCE_DIR}/app_for_helm_deployment/gpg.pass .
      rm -f ${OCI_PRIMARY_SOURCE_DIR}/gpg.pass
      helm registry login ${HELM_REGISTRY} -u ${HELM_REPO_USER} -p ${USER_AUTH_TOKEN}
      helm push *.tgz oci://${HELM_REGISTRY}/${HELM_REGISTRY_NAMESPACE}/${HELM_CHART_REPO}

outputArtifacts:
  - name: APPLICATION_DOCKER_IMAGE
    type: DOCKER_IMAGE
    # this location tag doesn't effect the tag used to deliver the container image
    # to the Container Registry
    location: node-express-getting-starter:latest
