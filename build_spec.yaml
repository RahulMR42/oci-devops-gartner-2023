version: 0.1
component: build
timeoutInSeconds: 600
runAs: root
shell: bash
env:
  exportedVariables:
    - BUILDRUN_HASH_INSTANCE
    - BUILDRUN_HASH_CI
    - BUILDRUN_HASH_HELM
    - STATIC_IMAGE_TAG
    - OBJECT_BUCKET_NAME
    - OBJECT_NAMESPACE

  variables:
    "JAVA_HOME" : "/usr/lib64/graalvm/graalvm22-ee-java17"
    NVM_VERSION: "v0.39.0"
    # PATH is a reserved variable and cannot be defined as a variable.
    # However, PATH can be changed in a build step and the change is visible in subsequent steps.

  vaultVariables:
    HELM_REPO_USER: ocid1.vaultsecret.oc1.iad.amaaaaaayat6pyaazejjxqtauh3z7yn7nljmphwc6p5puqsik36ktadxvfmq
    USER_AUTH_TOKEN: ocid1.vaultsecret.oc1.iad.amaaaaaayat6pyaakbhuf2xhboondo3sw6ila7ztqrljdtobo2hvb4wkxx7q
    GPG_PASSPHRASE: ocid1.vaultsecret.oc1.iad.amaaaaaayat6pyaay6ql4zbnnivmcrobzdhwfrloc3rfuumfiy23mwfzaaxa

steps:
  - type: Command
    name: "Define unique  tag for Instance"
    timeoutInSeconds: 40
    command: |
      export BUILDRUN_HASH_INSTANCE=`echo ${OCI_BUILD_RUN_ID} | rev | cut -c 1-7`
      echo "BUILDRUN_HASH_INSTANCE: " BUILDRUN_HASH_INSTANCE

  - type: Command
    name: "Define unique image tag for Container Instance"
    timeoutInSeconds: 40
    command: |
      export BUILDRUN_HASH_CI=`echo ${OCI_BUILD_RUN_ID} | rev | cut -c 1-7`
      echo "BUILDRUN_HASH_CI: " BUILDRUN_HASH_CI
      export STATIC_IMAGE_TAG=${IMAGE_STATIC_TAG}
      export OBJECT_BUCKET_NAME=${BUCKET_NAME}
      export OBJECT_NAMESPACE=${NAMESPACE_NAME}

  - type: VulnerabilityAudit
    name: "Vulnerability Audit for Maven Package"
    configuration:
      buildType: maven
      pomFilePath: ${OCI_PRIMARY_SOURCE_DIR}/app_for_computeinstance/pom.xml
      maxPermissibleCvssV2Score: 6.0
      maxPermissibleCvssV3Score: 7.0
    knowledgeBaseId: ${KB_OCID}
    vulnerabilityAuditCompartmentId: ${VA_COMPARTMENT_OCID}
    vulnerabilityAuditName: build_sample_${OCI_PRIMARY_SOURCE_SOURCE_BRANCH_NAME}

  - type: Command
    name: "Install GraalVM 22.x Native Image for Java17"
    command: |
      yum -y install graalvm22-ee-17-native-image
  - type: Command
    name: "Set PATH Variable"
    command: |
      export PATH=$JAVA_HOME/bin:$PATH
  # - type: Command
  #   name: "Build a Jar"
  #   command: |
  #     mvn --no-transfer-progress clean package
  - type: Command
    name: "Build a native executable Graal Binary"
    command: |
      cd ${OCI_PRIMARY_SOURCE_DIR}/app_for_computeinstance
      mvn --no-transfer-progress -Pnative -DskipTests package

  - type: Command
    timeoutInSeconds: 1200
    name: "Build container image for CI"
    command: |
      cd ${OCI_PRIMARY_SOURCE_DIR}/app_for_containerinstance
      cd python_app
      docker build --pull --rm -t python_fast_app .    

  - type: Command
    timeoutInSeconds: 6000
    name: "Upload Terraform config for CI"
    command: |
      cd ${OCI_PRIMARY_SOURCE_DIR}/app_for_containerinstance
      cd terraform
      cat variables.tf | envsubst >variables.tf_tmp
      cp variables.tf_tmp variables.tf
      cat remote-backend_template.tf| envsubst > remote-backend_template.tf_tmp
      cat remote-backend_template.tf_tmp|tr -d "[:blank:]"> remote-backend_template.tf
      rm remote-backend_template.tf_tmp
      rm variables.tf_tmp
      oci os object bulk-upload -ns ${NAMESPACE_NAME} -bn ${BUCKET_NAME} --src-dir ${OCI_PRIMARY_SOURCE_DIR}/app_for_containerinstance/terraform --overwrite --region ${REGION} --content-type auto --prefix devops_

    onFailure:
      - type: Command
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 40
        runAs: root

  - type: Command
    name: "Setup the Environment For Helm"
    timeoutInSeconds: 400
    command: |
      cd ${OCI_PRIMARY_SOURCE_DIR}/app_for_helm_deployment
      export BUILDRUN_HASH_HELM=`echo ${OCI_BUILD_RUN_ID} | rev | cut -c 1-7`
      echo "BUILDRUN_HASH_HELM: " $BUILDRUN_HASH_HELM
      oci artifacts generic artifact download --artifact-id ${GPG_ARTIFACT_OCID} --file ${OCI_PRIMARY_SOURCE_DIR}/private_decoded
      echo ${GPG_PASSPHRASE} >${OCI_PRIMARY_SOURCE_DIR}/app_for_helm_deployment/gpg.pass
  - type: Command
    timeoutInSeconds: 600
    name: "Install Node Prereqsm for Helm"
    command: |
      cd ${OCI_PRIMARY_SOURCE_DIR}/app_for_helm_deployment
      # install nvm
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/${NVM_VERION}/install.sh | bash
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
      nvm install lts/erbium
      echo "NODE VERSION: $(node -v)"
      echo "NPM VERSION: $(npm -v)"

    onFailure:
      - type: Command
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 40
        runAs: root

  - type: Command
    timeoutInSeconds: 600
    name: "NPM install for Helm"
    command: |
      cd ${OCI_PRIMARY_SOURCE_DIR}/app_for_helm_deployment
      npm install
    onFailure:
      - type: Command
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 40
        runAs: root

#  - type: Command
#    timeoutInSeconds: 1200
#    name: "Run Tests"
#    command: |
#      cd ${OCI_PRIMARY_SOURCE_DIR}/app_for_helm_deployment
#      npm test

  - type: Command
    timeoutInSeconds: 1200
    name: "Build container image for Helm"
    command: |
      cd ${OCI_PRIMARY_SOURCE_DIR}/app_for_helm_deployment
      docker build --pull --rm -t node-express-getting-starter .

  - type: Command
    timeoutInSeconds: 1200
    name: "Helm Package & Push"
    command: |
      cd ${OCI_PRIMARY_SOURCE_DIR}/app_for_helm_deployment/helm/node-service
      export BUILDRUN_HASH_HELM=${BUILDRUN_HASH_HELM}
      originalChartfile="Chart.yaml"
      tmpChartfile=$(mktemp)
      cp --attributes-only --preserve $originalChartfile $tmpChartfile
      cat $originalChartfile | envsubst > $tmpChartfile && mv $tmpChartfile $originalChartfile
      originalValuesfile="values.yaml"
      tmpValuesfile=$(mktemp)
      cp --attributes-only --preserve $originalValuesfile $tmpValuesfile
      cat $originalValuesfile | envsubst > $tmpValuesfile && mv $tmpValuesfile $originalValuesfile 
      cat $originalValuesfile
      helm package --sign --key ${HELM_SIGN_KEY} --keyring ${OCI_PRIMARY_SOURCE_DIR}/app_for_helm_deployment/private_decoded --passphrase-file ${OCI_PRIMARY_SOURCE_DIR}/app_for_helm_deployment/gpg.pass .
      rm -f ${OCI_PRIMARY_SOURCE_DIR}/app_for_helm_deployment/gpg.pass
      helm registry login ${HELM_REGISTRY} -u ${HELM_REPO_USER} -p ${USER_AUTH_TOKEN}
      helm push *.tgz oci://${HELM_REGISTRY}/${HELM_REGISTRY_NAMESPACE}/${HELM_CHART_REPO}

outputArtifacts:
  # - name: app_jar
  #   type: BINARY
  #   location: target/my-app-1.0-SNAPSHOT.jar
  - name: app_native_executable
    type: BINARY
    location: ${OCI_PRIMARY_SOURCE_DIR}/app_for_computeinstance/target/my-app

  - name: python_app_dockerimage
    type: DOCKER_IMAGE
    location: python_fast_app:latest

  - name: command_spec
    type: BINARY
    location: ${OCI_PRIMARY_SOURCE_DIR}/app_for_containerinstance/command_spec.yaml

  - name: helm_application_docker_image
    type: DOCKER_IMAGE
    # this location tag doesn't effect the tag used to deliver the container image
    # to the Container Registry
    location: node-express-getting-starter:latest